apply plugin: 'eclipse'

configurations {
	ajc
	aspects {transitive = false}
	ajInpath {transitive = false}
}

dependencies {
	ajc("org.aspectj:aspectjtools:1.6.10")
	ajc("org.aspectj:aspectjweaver:1.6.10")
	ajc("org.aspectj:aspectjrt:1.6.10")
	compile("org.aspectj:aspectjrt:1.6.10")
	runtime("org.aspectj:aspectjrt:1.6.10")
}

task compileJava(dependsOn: JavaPlugin.PROCESS_RESOURCES_TASK_NAME, overwrite: true) << {
	// Output compiled class files into the test classes directory
	def iajcDestDir = sourceSets.main.classesDir.absolutePath
	
	// Include the JARs in the testCompile configuration in the classpath used by the sources being compiled.
	def iajcClasspath = configurations.compile.asPath
	
	// Weave any binary aspects found in the JARs in the aspects configuration.
	def iajcAspectPath = configurations.aspects.asPath
	
	// Include the JARs in the ajInpath configuration in the inpath containing binary aspects and
	// classes that weave and may be woven. An aspect on the inpath may itself be affected by
	// aspects.
	def iajcInpath = configurations.ajInpath.asPath
	
	ant.taskdef(resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: configurations.ajc.asPath)
	
	ant.iajc(source: sourceCompatibility,
			target: targetCompatibility,
			destDir: iajcDestDir,
			classpath: iajcClasspath,
			aspectPath: iajcAspectPath,
			inpath: iajcInpath,
			debug: true,
			Xlint: 'ignore',
			sourceRootCopyFilter:"**/.svn/*,**/*.java,**/*.aj") {
				sourceroots {
					sourceSets.main.java.srcDirs.each{
						pathelement(location:it.absolutePath)
					}
				}
			}
}

task compileTestJava(dependsOn: JavaPlugin.COMPILE_JAVA_TASK_NAME, overwrite: true) << {
	// Output compiled class files into the test classes directory
	def iajcDestDir = sourceSets.test.classesDir.absolutePath
	
	// Include the JARs in the testCompile configuration and the main classes directory in the
	// classpath used by the sources being compiled.
	def iajcClasspath = ant.path {
		pathelement( location: configurations.testCompile.asPath)
		pathelement( location: sourceSets.main.classesDir.absolutePath)
	}
	
	// Weave any binary aspects found in the JARs in the aspects configuration and those found
	// in the main classes directory.
	def iajcAspectPath = ant.path {
		pathelement( location: configurations.aspects.asPath)
		pathelement( location: sourceSets.main.classesDir.absolutePath)
	}
	
	// Include the JARs in the ajInpath configuration in the inpath containing binary aspects and
	// classes that weave and may be woven. An aspect on the inpath may itself be affected by
	// aspects.
	def iajcInpath = configurations.ajInpath.asPath
	
	ant.taskdef(resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: configurations.ajc.asPath)
	
	ant.iajc(source: sourceCompatibility,
			target: targetCompatibility,
			destDir: iajcDestDir,
			classpath: iajcClasspath,
			aspectPath: iajcAspectPath,
			inpath: iajcInpath,
			debug: true,
			Xlint: 'ignore',
			sourceRootCopyFilter: '**/.svn/*,**/*.java,**/*.aj') {
				sourceroots {
					sourceSets.test.java.srcDirs.each{
						pathelement(location:it.absolutePath)
					}
				}
			}
}


/**
 * Add the AspectJ builder and supporting natures to the Eclipse project. 
 */
eclipseProject {
	buildCommand ('org.eclipse.ajdt.core.ajbuilder')
	natures('org.eclipse.ajdt.core.ajnature')
	natures('org.eclipse.ajdt.ui.ajnature')
}


/**
* Modify any Eclipse classpath entries that are also in the "aspects" or "ajInpath" configuration
* to include attributes that the AspectJ Eclipse plugin will use to indicate that these JARs include
* aspects that should be woven into the build. This allows unit tests that rely on
* AspectJ woven code to be executed within the Eclipse environment correctly.
*/
eclipseClasspath {
   whenConfigured { classpath ->
	   
	   classpath.entries.each {entry ->
		   configurations.aspects.each {aspectFile ->
			   if (entry.path == aspectFile.getPath())
			   {
				   entry.entryAttributes['org.eclipse.ajdt.aspectpath'] = 'org.eclipse.ajdt.aspectpath'
			   }
		   }
		   configurations.ajInpath.each {aspectFile ->
			   if (entry.path == aspectFile.getPath())
			   {
				   entry.entryAttributes['org.eclipse.ajdt.inpath'] = 'org.eclipse.ajdt.inpath'
			   }
		   }
	   }
   }
}