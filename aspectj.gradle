apply plugin: 'eclipse'

configurations {
	ajc
	aspects
	ajInpath
}

dependencies {
	ajc("org.aspectj:aspectjtools:1.6.10")
	ajc("org.aspectj:aspectjweaver:1.6.10")
	ajc("org.aspectj:aspectjrt:1.6.10")
	compile("org.aspectj:aspectjrt:1.6.10")
	runtime("org.aspectj:aspectjrt:1.6.10")
}

task compileJava(dependsOn: JavaPlugin.PROCESS_RESOURCES_TASK_NAME, overwrite: true) << {
	// Output compiled class files into the test classes directory
	def iajcDestDir = sourceSets.main.classesDir.absolutePath
	
	// Include the JARs in the testCompile configuration in the classpath used by the sources being compiled.
	def iajcClasspath = configurations.compile.asPath
	
	// Weave any binary aspects found in the JARs in the aspects configuration.
	def iajcAspectPath = configurations.aspects.asPath
	
	//Include the JARs in the ajInpath configuration in the inpath containing binary aspects and
	// classes that weave and may be woven. An aspect on the inpath may itself be affected by
	// aspects.
	def iajcInpath = configurations.ajInpath.asPath
	
	ant.taskdef(resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: configurations.ajc.asPath)
	
	ant.iajc(source: sourceCompatibility,
			target: targetCompatibility,
			destDir: iajcDestDir,
			classpath: iajcClasspath,
			aspectPath: iajcAspectPath,
			inpath: iajcInpath,
			debug: true,
			Xlint: 'ignore',
			sourceRootCopyFilter:"**/.svn/*,**/*.java,**/*.aj") {
				sourceroots {
					sourceSets.main.java.srcDirs.each{
						pathelement(location:it.absolutePath)
					}
				}
			}
}

task compileTestJava(dependsOn: JavaPlugin.COMPILE_JAVA_TASK_NAME, overwrite: true) << {
	// Output compiled class files into the test classes directory
	def iajcDestDir = sourceSets.test.classesDir.absolutePath
	
	// Include the JARs in the testCompile configuration and the main classes directory in the
	// classpath used by the sources being compiled.
	def iajcClasspath = ant.path {
		pathelement( location: configurations.testCompile.asPath)
		pathelement( location: sourceSets.main.classesDir.absolutePath)
	}
	
	// Weave any binary aspects found in the JARs in the aspects configuration and those found
	// in the main classes directory.
	def iajcAspectPath = ant.path {
		pathelement( location: configurations.aspects.asPath)
		pathelement( location: sourceSets.main.classesDir.absolutePath)
	}
	
	// Include the JARs in the ajInpath configuration in the inpath containing binary aspects and
	// classes that weave and may be woven. An aspect on the inpath may itself be affected by
	// aspects.
	def iajcInpath = configurations.ajInpath.asPath
	
	ant.taskdef(resource:"org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties", classpath: configurations.ajc.asPath)
	
	ant.iajc(source: sourceCompatibility,
			target: targetCompatibility,
			destDir: iajcDestDir,
			classpath: iajcClasspath,
			aspectPath: iajcAspectPath,
			inpath: iajcInpath,
			debug: true,
			Xlint: 'ignore',
			sourceRootCopyFilter: '**/.svn/*,**/*.java,**/*.aj') {
				sourceroots {
					sourceSets.test.java.srcDirs.each{
						pathelement(location:it.absolutePath)
					}
				}
			}
}

eclipseProject {
	buildCommand ('org.eclipse.ajdt.core.ajbuilder')
	natures('org.eclipse.ajdt.core.ajnature')
	natures('org.eclipse.ajdt.ui.ajnature')
}





